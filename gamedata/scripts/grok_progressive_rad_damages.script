grok_rads = 0
step = 1000

function actor_on_before_hit(shit)
	if (shit.type ~= 3) then
		return
	end

	local actor_rad = math.floor(db.actor.radiation * 10000 * 0.387) / 1000
end

function actor_on_update()
	if db.actor.radiation > 0 then
		local actor_rad = math.floor(db.actor.radiation * 10000 * 0.387) / 1000
		local conditions = db.actor:cast_Actor():conditions()
		local max_power = conditions and conditions:GetMaxPower()
		local power_dif = 1 - actor_rad * 0.4
		local max_power = max_power * power_dif

		if db.actor.power > max_power then
			db.actor.power = max_power
		end
	end

	if not tg then
		tg = time_global()
	end

	if tg then
		if time_global() > tg + step then
			tg = nil
			local actor_rad = math.floor(db.actor.radiation * 10000 * 0.387) / 1000

			if actor_rad > 0 then
				local base_damage_value = 0.0001
				local actor_health = db.actor.health
				local life_remove = actor_health - (base_damage_value + base_damage_value * actor_rad / 2)

				if zzz_player_injuries.bhs_exp_mode then
					life_remove = actor_health - (base_damage_value + base_damage_value * actor_rad / 6)
				end

				db.actor:set_health_ex(life_remove)
			end

			local chance = math.sqrt(clamp(actor_rad - 1.5, 0.0001, 3.87)) / math.sqrt(100) - 0.0001

			if chance > 0.1 and math.random() < chance then
				local actor_health = db.actor.health
				local actor_health_coeff = 0.5
				local adj_actor_health = actor_health - (math.random(35, 80) * actor_health_coeff) / 1000

				if zzz_player_injuries.bhs_exp_mode then
					adj_actor_health = actor_health - (math.random(35, 80) * actor_health_coeff) / 4000
				end

				db.actor:set_health_ex(adj_actor_health)

				grok_rads = 1
				sound = sound_object("grok\\cough" .. math.random(1, 7) .. AGDD_voiced_actor.muffle)
				sound:play(db.actor, 0, sound_object.s2d)
				sound.volume = 1.3

				level.add_pp_effector("blur2.ppe", math.random(645808, 645820), false)
			else
				grok_rads = 0
			end
		end
	end
end

function on_game_start()
	RegisterScriptCallback("actor_on_before_hit", actor_on_before_hit)
	RegisterScriptCallback("actor_on_update", actor_on_update)
end
